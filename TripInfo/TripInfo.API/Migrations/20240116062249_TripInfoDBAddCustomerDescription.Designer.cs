// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TripInfo.API.DbContexts;

#nullable disable

namespace TripInfo.API.Migrations
{
    [DbContext(typeof(TripInfoContext))]
    [Migration("20240116062249_TripInfoDBAddCustomerDescription")]
    partial class TripInfoDBAddCustomerDescription
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.15")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("TripInfo.API.Entites.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<double>("CustomerPrice")
                        .HasColumnType("float");

                    b.Property<double>("CustomerServiceFee")
                        .HasColumnType("float");

                    b.Property<double>("CustomerTip")
                        .HasColumnType("float");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("TripId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TripId");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("TripInfo.API.Entites.Trip", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<double>("Boost")
                        .HasColumnType("float");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)");

                    b.Property<double>("Customer10Price")
                        .HasColumnType("float");

                    b.Property<double>("Customer10ServiceFee")
                        .HasColumnType("float");

                    b.Property<double>("Customer10Tip")
                        .HasColumnType("float");

                    b.Property<double>("Customer1Price")
                        .HasColumnType("float");

                    b.Property<double>("Customer1ServiceFee")
                        .HasColumnType("float");

                    b.Property<double>("Customer1Tip")
                        .HasColumnType("float");

                    b.Property<double>("Customer2Price")
                        .HasColumnType("float");

                    b.Property<double>("Customer2ServiceFee")
                        .HasColumnType("float");

                    b.Property<double>("Customer2Tip")
                        .HasColumnType("float");

                    b.Property<double>("Customer3Price")
                        .HasColumnType("float");

                    b.Property<double>("Customer3ServiceFee")
                        .HasColumnType("float");

                    b.Property<double>("Customer3Tip")
                        .HasColumnType("float");

                    b.Property<double>("Customer4Price")
                        .HasColumnType("float");

                    b.Property<double>("Customer4ServiceFee")
                        .HasColumnType("float");

                    b.Property<double>("Customer4Tip")
                        .HasColumnType("float");

                    b.Property<double>("Customer5Price")
                        .HasColumnType("float");

                    b.Property<double>("Customer5ServiceFee")
                        .HasColumnType("float");

                    b.Property<double>("Customer5Tip")
                        .HasColumnType("float");

                    b.Property<double>("Customer6Price")
                        .HasColumnType("float");

                    b.Property<double>("Customer6ServiceFee")
                        .HasColumnType("float");

                    b.Property<double>("Customer6Tip")
                        .HasColumnType("float");

                    b.Property<double>("Customer7Price")
                        .HasColumnType("float");

                    b.Property<double>("Customer7ServiceFee")
                        .HasColumnType("float");

                    b.Property<double>("Customer7Tip")
                        .HasColumnType("float");

                    b.Property<double>("Customer8Price")
                        .HasColumnType("float");

                    b.Property<double>("Customer8ServiceFee")
                        .HasColumnType("float");

                    b.Property<double>("Customer8Tip")
                        .HasColumnType("float");

                    b.Property<double>("Customer9Price")
                        .HasColumnType("float");

                    b.Property<double>("Customer9ServiceFee")
                        .HasColumnType("float");

                    b.Property<double>("Customer9Tip")
                        .HasColumnType("float");

                    b.Property<double>("CustomerPaymentsTotal")
                        .HasColumnType("float");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime2");

                    b.Property<double>("Distance")
                        .HasColumnType("float");

                    b.Property<TimeSpan>("Duration")
                        .HasColumnType("time");

                    b.Property<double>("Fare")
                        .HasColumnType("float");

                    b.Property<int>("PointsEarned")
                        .HasColumnType("int");

                    b.Property<double>("Promotion")
                        .HasColumnType("float");

                    b.Property<double>("ServiceFeeTotal")
                        .HasColumnType("float");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("StoreName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<double>("Tip")
                        .HasColumnType("float");

                    b.Property<double>("YourEarnings")
                        .HasColumnType("float");

                    b.Property<string>("Zip")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("Id");

                    b.ToTable("Trips");
                });

            modelBuilder.Entity("TripInfo.API.Entites.Customer", b =>
                {
                    b.HasOne("TripInfo.API.Entites.Trip", "Trip")
                        .WithMany("Customer")
                        .HasForeignKey("TripId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Trip");
                });

            modelBuilder.Entity("TripInfo.API.Entites.Trip", b =>
                {
                    b.Navigation("Customer");
                });
#pragma warning restore 612, 618
        }
    }
}
